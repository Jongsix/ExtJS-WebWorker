{"name":"ExtJS WebWorker","tagline":"Ext.ux.WebWorker is an extension to manage HTML5 WebWorker with ExtJS and Sencha Touch","body":"# ExtJS-WebWorker\r\n\r\nExtJS-WebWorker is an extension to handle and use the HTML5 WebWorker with ExtJS and Sencha Touch.\r\n\r\nIt has two classes: `Ext.ux.WebWorker` and `Ext.ux.WebWorkerManager`<br/>\r\nThe first one is a wrapper for standard HTML5 WebWorker and it provides a lot of interesting and easy-to-use features.\r\nThe second one is a singleton to register different Ext.ux.WebWorker and it provides functions to work with every registered webworker at the same time.\r\n\r\n## Usage\r\nLoad `Ext.ux.WebWorker` and `Ext.ux.WebWorkerManager` via `Ext.require`:\r\n\r\n```javascript\r\nExt.Loader.setConfig ({\r\n\tenabled: true\r\n});\r\n\r\nExt.require (['Ext.ux.WebWorker', 'Ext.ux.WebWorkerManager']);\r\n```\r\n\r\nNow, you are ready to use them in your code as follows:\r\n\r\n```javascript\r\n// There are two ways to create a worker: from a file or inline.\r\n\r\n// Build a worker from a different file\r\nvar ww = Ext.create ('Ext.ux.WebWorker', {\r\n\tfile: 'myWorker.js'\r\n});\r\n\r\n// Build a worker inline\r\nvar ww = Ext.create ('Ext.ux.WebWorker', {\r\n\tblob: 'onmessage = function (e) {postMessage (\"A message from worker: + \" e.data);}'\r\n});\r\n\r\n// Using Ext.ux.WebWebWorkerManager\r\nExt.ux.WebWorkerManager.register (ww);\r\n```\r\n\r\n## Communications supported\r\n### Pure text communication\r\nThe communication is text-only, without objects or any other kind of data.\r\n\r\n```javascript\r\nvar webworker = Ext.create ('Ext.ux.WebWorker', {\r\n\tfile: 'myWorker.js' ,\r\n\tlisteners: {\r\n\t\tmessage: function (ww, message) {\r\n\t\t\tconsole.log ('A new message is arrived: ' + message);\r\n\t\t} ,\r\n\t\terror: function (ww, error) {\r\n\t\t\tExt.Error.raise (error);\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// myWorker.js\r\npostMessage ('this is the message!');\r\n```\r\n\r\n### Pure event-driven communication\r\nThe communication is event-driven: an event and a String or Object are sent and the webworker handles different events.\r\n\r\n```javascript\r\nvar webworker = Ext.create ('Ext.ux.WebWorker', {\r\n\tfile: 'myWorker.js' ,\r\n\tlisteners: {\r\n\t\tstart: function (ww, message) {\r\n\t\t\tconsole.log (message);\r\n\t\t\tww.send ('parse', 'a string to parse');\r\n\t\t} ,\r\n\t\tverify: function (ww, message) {\r\n\t\t\tconsole.log (message);\r\n\t\t\tww.send ('verify equation', {\r\n\t\t\t\tequation: 'x+y-z=10' ,\r\n\t\t\t\tx: 10 ,\r\n\t\t\t\ty: 5 ,\r\n\t\t\t\tz: 5\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// A 'terminate' event is sent from the worker (myWorker.js)\r\n// 'data' has 'log' and 'msg' fields\r\nwebworker.on ('terminate', function (data) {\r\n\tconsole.log ('Log: ' + data.log);\r\n\tconsole.log ('Message: ' + data.msg);\r\n});\r\n\r\nwebworker.send ({\r\n\tevent: 'start'\r\n});\r\n\r\n// myWorker.js\r\nonmessage = function (message) {\r\n\tswitch (message.event) {\r\n\t\tcase 'start':\r\n\t\t\tpostMessage ({\r\n\t\t\t\tevent: 'start' ,\r\n\t\t\t\tdata: 'WebWorker started!'\r\n\t\t\t});\r\n\t\t\tbreak;\r\n\t\tcase 'parse':\r\n\t\t\tpostMessage ({\r\n\t\t\t\tevent: 'verify' ,\r\n\t\t\t\tdata: 'String parsed! Next!'\r\n\t\t\t});\r\n\t\t\tbreak;\r\n\t\tcase 'verify equation':\r\n\t\t\tpostMessage ({\r\n\t\t\t\tevent: 'terminate' ,\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tlog: message.data.x + '+' + message.data.y + '-' + message.data.z + '=10' ,\r\n\t\t\t\t\tmsg: 'Equation verified! Terminate!'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tclose ();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n```\r\n\r\n### Mixed communication\r\nThe communication is mixed: it handles text-only and event-driven communication.\r\n\r\n```javascript\r\nvar webworker = Ext.create ('Ext.ux.WebWorker', {\r\n\tfile: 'myWorker.js' ,\r\n\tlisteners: {\r\n\t\tmessage: function (ww, message) {\r\n\t\t\tconsole.log ('Text-only message arrived is: ' + message);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nwebworker.send ({\r\n\tevent: 'echo' ,\r\n\tdata: 'Send me a pure-text message plz!'\r\n});\r\n\r\n// myWorker.js\r\nonmessage = function (message) {\r\n\tswitch (message.event) {\r\n\t\tcase 'echo':\r\n\t\t\tpostMessage (message.data);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n```\r\n\r\n## Ext.ux.WebWorkerManager features\r\nHere's an example of the manager:\r\n\r\n```javascript\r\nvar ww1 = Ext.create ('Ext.ux.WebWorker', {\r\n\tfile: 'myWorker.js'\r\n});\r\n\r\nExt.ux.WebWorkerManager.register (ww1);\r\n\r\nvar blob = [\r\n\t'onmessage = function (msg) {' ,\r\n\t'\tif (msg.event === \"system shutdown\") {' ,\r\n\t'\t\tvar res = {' ,\r\n\t'\t\t\tevent: \"stop\" ,' ,\r\n\t'\t\t\tdata: \"Computation of worker 2 terminates correctly in 15h13m20s.\"' ,\r\n\t'\t\t};' ,\r\n\t'\t\tpostMessage (res);' ,\r\n\t'\t}' ,\r\n\t'}'\r\n].join ('');\r\n\r\nvar ww2 = Ext.create ('Ext.ux.WebWorker', {\r\n\tblob: blob\r\n});\r\n\r\nExt.ux.WebWorkerManager.register (ww2);\r\n\r\nvar ww3 = Ext.create ('Ext.ux.WebWorker', {\r\n\tfile: 'otherWorker.js'\r\n});\r\n\r\nExt.ux.WebWorkerManager.register (ww3);\r\n\r\nExt.ux.WebWorkerManager.listen ('stop', function (ww, data) {\r\n\tExt.Msg.show ({\r\n\t\ttitle: 'Worker stopped' ,\r\n\t\tmsg: 'Log of the computation: ' + data ,\r\n\t\ticon: Ext.Msg.INFO ,\r\n\t\tbuttons: Ext.Msg.OK\r\n\t});\r\n});\r\n\r\n// This will be handled by everyone\r\nExt.ux.WebWorkerManager.broadcast ('system shutdown', 'BROADCAST: the system will shutdown in few minutes.');\r\n\r\nExt.ux.WebWorkerManager.stopAll ();\r\n\r\nExt.ux.WebWorkerManager.unregister (ww1);\r\nExt.ux.WebWorkerManager.unregister (ww2);\r\nExt.ux.WebWorkerManager.unregister (ww3);\r\n```\r\n\r\n## Run the demo\r\nGo to *http://localhost/ExtJS-WebWorker/demo* and play it!\r\n\r\n## Documentation\r\nYou can build the documentation (like ExtJS Docs) with [**jsduck**](https://github.com/senchalabs/jsduck):\r\n\r\n```bash\r\n$ jsduck ux --output /var/www/docs\r\n```\r\n\r\nIt will make the documentation into docs dir and it will be visible at: http://localhost/docs\r\n\r\n## License\r\n(GNU GPLv3)\r\n\r\nCopyright (c) 2012 Vincenzo Ferrari <wilk3ert@gmail.com>\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}